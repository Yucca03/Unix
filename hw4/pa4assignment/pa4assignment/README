														                            UNIX System Programming
                           Programming Assignment #4
                           "It Came from Outer Space"

Due: Monday, May 8  at  9:00 am.

Submission method: You will post to the course website, just like the previous
                   assignment. 

Submission rules: I REQUIRE you to FOLLOW THESE RULES:

                  1. Submit one file named "<your student ID>.pa4.sed"

                  2. Submissions made after the deadline will be ignored.
                     (That means: no late submissions on this assignment.)
                     (By the way, if you don't turn in your assignments, you
                      will probably Fail The Class. That's a Fact. So start
                      early and ask questions.)
                  
                  This is a large class. Unless each of you follows the above
                  rules, the TAs' work becomes so hard. So I INSIST that you 
                  FOLLOW the above rules. If you don't, we won't accept your 
                  homework.

                  If you have questions about these rules, you may post your 
                  questions to the course website.


Getting help:   - The Professor has office hours on Monday from 12:30-2:30, 
                  and on Friday from 10:00-12:00, in room 9037.  He can also 
                  be reached by email.
                - The TAs are also available to answer your questions.
                - Questions about the assignment can be posted to the 
                  Discussion Forum.
                - You may also discuss the ideas of the assignment with your
                  classmates. Such discussions can be quite helpful to your 
                  learning -- IF you ONLY talk about the general concepts of
		  the steps of the assignment.
		  - If, however, you tell other students the specific details
		    of your implementation, then you are not helping each other
		    to learn; you are just doing the work for them.
                    In other words, you are cheating. You CANNOT show another
		    student ANY part of the answer to the assignment.

Cheating policy:  We encourage students to form study groups. But this does not
                  mean sharing code. If students are found to be sharing work,
		  they can receive a 0 for the entire course, or worse.
                  It is cheating to let another student see your work, or to 
                  let them look over your shoulder when your code is on the
		  screen.
		  A good way to know you cheated: if you have code that is in
		  your solution just because another student told you to put
		  it there, but you don't actually understand it.
		  If you are still unsure, you can ask the TA for more
		  explanation.
                  We always look for evidence of cheating, so don't do it.
                  (In any event, even if you do not get caught, those who 
                  copy the homework will not learn the material, so they 
                  will fail the exam.)

Most Important    The programming assignments are a large part of the grade.
Things to Know:	  This large point value means that, if you don't do them, you
		  will fail.
		  The large point value also explains why the policy against
		  cheating is strictly enforced.
		  

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
: Part 1. Assignment Overview :
'''''''''''''''''''''''''''''''
In preparing the next assignment, I wanted to locate some of the spaces within
regular expressions. These spaces are the ones that will refer to as "outside"
spaces. An outside space is one that is not inside either backslash quoting
or brackets. So, for example, the following regular expression has 2 outside
spaces (one at the front of the expression and one at the end). All of the
other spaces are either backslashed or are within brackets:

% cat infile | grep ' \ \ [ ][ab ][^ ][\ ] '

In working out how to identify these outside spaces, I came to realize that
that calculation is difficult enough to be an assignment on its own. And so we
will do that in this assignment. And, in order to know that we have properly
identified these outside spaces, we with replace them with "&" symbols. For
example, typing the following line will yield the output indicated:

% ./pa4.csh ' \ \ [ ][ab ][^ ][\ ]   \  .'
&\ \ [ ][ab ][^ ][\ ]&&&\ &.
%


,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
: Part 2. An Overview of Regular Expression Special Cases :
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Now, there are a variety of special situations that complicate matters. It is
good to understand these special cases, because we want to become experts on
regular expressions (since they will be used throughout the remainder of this
course, and will be on the final exam, and will also be used in other courses).
So the special situations are:
- A "]" can occur without matching to a prior "[":
    % echo "a]b[c" | grep -o '].'
    ]b
- But the same is not true of a "[" which must match to a later "]":
    % echo "a]b[c" | grep -o '[.'
    grep: Invalid regular expression
- A backslash can stop a "[" from taking effect:
    % echo "a[ ]b" | grep -o '\[ ]'
    [ ]
    % ./pa4.csh '\[ ]'
    \[&]
- A pair of backslashes would not have the effect of stopping the "[" (or, for
  that matter, an outside space):
    % cat example
    a\\[ ]\\ b\[ ]\ c\\ \\ d\ \ e
    % cat example | grep -o '.\\[ ]\\ .'
    d\ \ e
    % ./pa4.csh '.\\[ ]\\ .'
    .\\[ ]\\&.
- A "[" (or any number of "[") can occur within brackets:
    % echo 'a[ab[[bc cd[ de[[[ ]ee[[ f' | grep -o '[a-z][[[ ][a-z]'
    a[a
    c c
- A "]" at the BEGINNING of a bracket does not end the brackets (it is done
  this way to allow an easy way to include "]" within a bracketed set):
    % echo 'aa[bb]ccxdd]ee' | grep -o '[][x][a-z]'
    [b
    ]c
    xd
    ]e
- The "]" at the beginning of a bracket can come after a "^", and it will still
  not end the brackets:
    % echo 'aa[bb]ccxdd]ee' | grep -o '[^][x][a-z]'
    aa
    bb
    cc
    dd
    ee
- A "]" that is not at the beginning of a bracket will end the brackets, even
  if it is preceded by a backslash:
    % echo 'aa[bb]ccxdd]ee' | grep -o '[^[x\]][a-z]'
    b]c
    d]e


,,,,,,,,,,,,,,,,,,,,,,,,,,
: Part 3. Provided Files :
''''''''''''''''''''''''''
If you are reading this file, then you must have untarred the assignment.
Looking in the untarred directory, you will see:
  % ls
  pa4.csh  pa4b.csh  README  tempfile.pa4
  %

Let's start by looking at pa4b.csh:
  % cat pa4b.csh
  #!/usr/bin/tcsh
  set echo
  $1:q >& /dev/null

This is an unusual script. It is a way that I designed to force UNIX to do what
I wanted. I'll show you what I mean. Suppose I had the following file:
  % cat notwhatIwant
  #!/usr/bin/tcsh
  echo "$1:q" > wrong.txt
  % ./notwhatIwant '\\\\'
  % cat wrong.txt
  \\
  %

Well, that's not what I want, because wrong.txt is not the same as the original
argument. But pa4b.csh can be used to get what I do want:
  % cat whatIwant
  #!/usr/bin/tcsh
  ./pa4b.csh $1:q >& right.txt
  % ./whatIwant '\\\\'
  % cat right.txt
  \\\\
  %

Now, why does this work? It is because the "set echo" command doesn't expand,
but echo does, with no flag to prevent it (at least on my system). Note that
you don't need to worry too much about this situation, because I've already
solved it and given you the pa4b.csh file.

Next, let's look at the provided p4.csh:
  % cat pa4.csh
  #!/usr/bin/tcsh
  ./pa4b.csh $1:q >& tempfile
  cat tempfile | tr "\\" "%" | sed -f pa4.sed
  %

First, we see from pa4.csh that the tempfile is created from pa4b.csh, just
like the right.txt file that I described above.

Second, we see from pa4.csh that the backslashes are replaced by "%" symbols.
The reasons that we do this are:
  1. So that we won't have to keep double-backslashing throughout the homework.
  2. Because I'm going to assume that your inputted regular expressions will
     not contain actual "%" symbols. (In fact, later in this assignment, we'll
     also assume that the regular expressions that you input won't use these
     symbols either: "`", "~", "@", "#", "&", "_", "+", "=", "|". We assume
     this now for convenience, but will fix it in the next homework.)

Third, we see that the pa4.csh file's final command is "sed -f pa4.sed". You
must edit the pa4.csh file to rename "pa4.sed" to "<your student ID>.pa4.sed".
Also, looking again at the sed command, notice that this command is using a
flag (-f) that you haven't seen before (that's why I'm giving it to you). The
effect of the "-f" is to treat the pa4.sed file as though it were typed on the
command line (and we've seen in Lecture 8 what it means for sed commands to be
typed on the command line). To make this more clear, consider:
  % echo abcde | sed 's/b/B/;s/d/D/'
  aBcDe
  % cat example.sed
  s/b/B/;s/d/D/
  % echo abc | sed -f example.sed
  aBcDe
  %

Note also, from the above example.sed file, that you don't use the single quote
around the commands when placed in a file, even though usually you do use such
single quotes when those commands go on the command line. Another difference,
of a similar type, between the two ways of supplying commands is that the ";"
can be replaced by a newline in the file:
  % cat example2.sed
  s/b/B/
  s/d/D/
  % echo abc | sed -f example2.sed
  aBcDe
  %

Now we move onto the last of the provided files, tempfile.pa4:
  % cat tempfile.pa4
  < >\ \[< >][] ][^] ][^ ]][[^]< >]< >]< >[ ][\ ][^ ][] \]< >\ ]
  %

This file was created by me when I typed:
  % ./pa4.csh '< >\ \[< >][] ][^] ][^ ]][[^]< >]< >]< >[ ][\ ][^ ][] \]< >\ ]'
  <&>\ \[< >][] ][^] ][^ ]][[^]<&>]<&>]<&>[ ][\ ][^ ][] \]<&>\ ]
  % mv tempfile tempfile.pa4
  %

So the purpose of the tempfile.pa4 is to let you test that your pa4b.csh file
works correctly (because I want to be sure that some of you don't have other
systems where it doesn't work):
  % ./pa4.csh '< >\ \[< >][] ][^] ][^ ]][[^]< >]< >]< >[ ][\ ][^ ][] \]< >\ ]'
  <&>\ \[< >][] ][^] ][^ ]][[^]<&>]<&>]<&>[ ][\ ][^ ][] \]<&>\ ]
  % diff tempfile tempfile.pa4
  %


,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
: Part 4. Designing the pa4.sed file (i.e., the file you will submit) :
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Line 1: This is a series of three substitutions.
        1. To replace EVERY pair "%%" with a "#" symbol. The point of this is
	   to not confuse "\\[" with "\[" (the first "[" being the start of a
	   bracket, but the second "[" being backslashed).
	2. To replace EVERY "%[" with "%@". The point of this is to deal with
	   backslashed "[" symbols; by replacing the "[" with a "@", we won't
	   get it confused with the starts of brackets.
	3. To replace EVERY "% " with "%_". This deals with backslashed spaces;
	   by replacing the " " with a "_", we won't get it confused with the
	   spaces that are meant to be replaced with "&" symbols.

Line 2: This is a series of two substitutions. It begins to deal with brackets.
        1. We want to deal with the FIRST ONE of the "]" symbols that exist
	   within brackets, but which don't end the brackets. (That is: the "]"
	   in "[]" or "[^]".)
           These two cases must be handled by one regular expression that uses
	   the "\(" and "\{" operators. The identified "]" symbols will then be
	   replaced by "~" symbols. (And, because they are replaced, then they
	   won't get confused with the "]" that end bracket sets.)
        2. We want to deal with the FIRST ONE of the "[" symbols in the input.
	   (We know that that "[" is definitely starting a bracket, because
	   the backslashed ones are removed.) We deal with the "[" by replacing
	   it with a "+". We also want to identify the first "[", " ", or "]"
	   within the bracket set (and there must be one of them, because there
	   will definitely be a "]" at least). We will identify them by putting
	   a '`' in front of it. For example:
	     ...[[ abc]... -> ...+`[ abc]...
	     ...[ab[ c]... -> ...+ab`[ c]...
	     ...[ab [c]... -> ...+ab` [c]...
	     ...[~ abc]... -> ...+~` abc]...
	     ...[^~ ab]... -> ...+^~` ab]...
	     ...[^[ ab]... -> ...+^`[ ab]...
	     ...[^abcd]... -> ...+^abcd`]...

Line 3: This is a series of three substitutions:
        1. Replace the "` " (if present) with "_". (Which makes sense: if a " "
	   has a "`" in front of it, then it is not an outside space.)
        2. Replace the "`[" with "@". (Which makes sense: if a "[" has a "`" in
	   front of it, then it is not starting a new bracket set.)
        3. This now tries to find the next place to put the "`". For example:
	     ...+@ abc]...  -> ...+@` abc]...
	     ...+ab@ c]...  -> ...+ab@` c]...
	     ...+ab_[c]...  -> ...+ab_`[c]...
	     ...+~_abc]...  -> ...+~_abc`]...
	     ...+^~_ab]...  -> ...+^~_ab`]...
	     ...+^@ ab]...  -> ...+^@` ab]...
	     ...+^abcd`]... -> ...+^abcd``]...

           Notice that the final example above produced "...+^abcd``]...". So
	   there can be multiple ` before the bracket-closing "]" 

Line 4: This is a series of four substitutions:
        1. Identical to Line 3, substitution #1.
        2. Identical to Line 3, substitution #2.
	3. Replace the "+" with a "@".
	4. Replace the "]" and its preceding "`" symbol(s) with a "|".

Lines 5-25: At this point, we can say that the first bracket has been dealt
            with. But there might be additional brackets. For this homework,
	    we'll allow up to 7 brackets. This means copying lines 2-4 seven
	    more times.

Line 26: This line replaces all remaining spaces with "&" symbols. Then it
         returns all of the special symbols (like "@" and "#") with their
	 original symbols.   
