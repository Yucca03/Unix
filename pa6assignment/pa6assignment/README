                             UNIX System Programing
                           Programming Assignment #6
                         "It could've been sed better"

Due: Friday, June 2  at  11:59 pm.

Submission method: You will post to the course website, just like the previous
                   assignment. 

Submission rules: I REQUIRE you to FOLLOW THESE RULES:

                  1. Submit one file named "<your student ID>.pa6.sed"

                  2. Submissions made after the deadline will be ignored.
                     (That means: no late submissions on this assignment.)
                     (By the way, if you don't turn in your assignments, you
                      will probably Fail The Class. That's a Fact. So start
                      early and ask questions.)
                  
                  This is a large class. Unless each of you follows the above
                  rules, the TAs' work becomes so hard. So I INSIST that you 
                  FOLLOW the above rules. If you don't, we won't accept your 
                  homework.

                  If you have questions about these rules, you may post your 
                  questions to the course website.


Getting help:   - The Professor has office hours on Monday from 12:30-2:30, 
                  and on Friday from 10:00-12:00, in room 9037.  He can also 
                  be reached by email.
                - The TAs are also available to answer your questions.
                - Questions about the assignment can be posted to the 
                  Discussion Forum.
                - You may also discuss the ideas of the assignment with your
                  classmates. Such discussions can be quite helpful to your 
                  learning -- IF you ONLY talk about the general concepts of
		  the steps of the assignment.
		  - If, however, you tell other students the specific details
		    of your implementation, then you are not helping each other
		    to learn; you are just doing the work for them.
                    In other words, you are cheating. You CANNOT show another
		    student ANY part of the answer to the assignment.

Cheating policy:  We encourage students to form study groups. But this does not
                  mean sharing code. If students are found to be sharing work,
		  they can receive a 0 for the entire course, or worse.
                  It is cheating to let another student see your work, or to 
                  let them look over your shoulder when your code is on the
		  screen.
		  A good way to know you cheated: if you have code that is in
		  your solution just because another student told you to put
		  it there, but you don't actually understand it.
		  If you are still unsure, you can ask the TA for more
		  explanation.
                  We always look for evidence of cheating, so don't do it.
                  (In any event, even if you do not get caught, those who 
                  copy the homework will not learn the material, so they 
                  will fail the exam.)

Most Important    The programming assignments are a large part of the grade.
Things to Know:	  This large point value means that, if you don't do them, you
		  will fail.
		  The large point value also explains why the policy against
		  cheating is strictly enforced.
		  


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 


,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
: Part 1. Assignment Summary :
''''''''''''''''''''''''''''''
In programming assignment 4, we implemented a very messy sed script to locate
outside spaces in a regular expression pattern. One of the reasons for the mess
was that we did not know all of the sed commands, at that time.

We'll now re-implement that assignment. An advantage of our new implementation
is that we'll be able to handle arbitrary input (the earlier assignment could
only process 7 or fewer "[...]" elements).

,,,,,,,,,,,,,,,,,,,,,,,,,,
: Part 2. Provided files :
''''''''''''''''''''''''''
If you are reading this file, then you must have untarred the assignment.
Looking in the untarred directory, you will see:

% ls
pa6.template  README  test6.in  test6.out
%

Let's first take a look at test6.in:
% cat test6.in
< >\ \[<   >][][][[\ [ ]< >][^] ][^ ]][[^]< >]< >]< >[ ][\ ][^ ][] \]< >\ ]< >*
   \ \[     ][][][[\ [ ]   ][^] ][^ ]][[^]   ]   ]   [ ][\ ][^ ][] \]   \ ]   *
%

OK. So that's an input file similar to in programming assignment 4. Then, it
follows that test6.out is probably the expected output:
% cat test6.out
<&>\ \[<&&&>][][][[\ [ ]<&>][^] ][^ ]][[^]<&>]<&>]<&>[ ][\ ][^ ][] \]<&>\ ]<&>*
&&&\ \[&&&&&][][][[\ [ ]&&&][^] ][^ ]][[^]&&&]&&&]&&&[ ][\ ][^ ][] \]&&&\ ]&&&*
%

Yes, it is. I created it by typing: "cat test6.in | ./mypa6.sed > test.out".
Notice that each outside space has become a "&". (As a visual aid, the first
input line put all of these spaces inside of "<" / ">" symbols.)

The remaining provided file is "pa6.template". This file is the basis of your
assignment; you complete the assignment by modifying this file. The file has
detailed comments to guide the completing of the assignment. You should read
that file now, and follow its instructions.

,,,,,,,,,,,,,,,,,,,,,,,,,,,,
: Part 3. General guidance :
''''''''''''''''''''''''''''
Sed can be a difficult language to learn. You therefore must apply the skills
of programming that you have learned in your study of computer science:

 - When approaching a complex task, you don't write it all and then debug it.
   You do one part, verify it, and then move on. In this present assignment,
   the various steps (that are indicated in template file) should be tested
   individually. Get the first to work. Then move on to the second, etc.

 - Programs will hang, if they are stuck in an infinite loop. This sed program
   has a loop, so it can get stuck, if there is a bug. Don't implement the loop
   branch-back, if you don't have the stuff above it working, because it can
   cause a hang (which you can kill with Ctrl-C).

 - When you want to know if a piece of code is doing what you want, you test
   it by printing out the code's answer, to see if it matches your expectation.
   This is called debug printing. You must have used it before. Recall that it
   does not matter whether the piece of code in question is supposed to print
   an output -- you can still force a print, for debug purposes.

   - In the case of sed, it is harder to see what the output of a command was,
     because it might be in the hold space. But one way to see it would be to
     copy/paste in this: x;s/^/---\nHS:\n/p;s/---.HS:.//;x;s/^/PS:\n/p;s/PS:.//

     For example, suppose that you had "sed -n 'h;N'", and you wanted to see
     the hold and pattern spaces as you ran. You could do:
       % seq 8 11 | sed -n \
                  'h;N; x;s/^/---\nHS:\n/p;s/---.HS:.//;x;s/^/PS:\n/p;s/PS:.//'
       ---
       HS:
       8
       PS:
       8
       9
       ---
       HS:
       10
       PS:
       10
       11
       %
